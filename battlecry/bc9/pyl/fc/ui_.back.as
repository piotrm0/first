ui.windows = _root.windows;ui.menubar = _root.main.menubar;ui.selected_root = 0;ui.selected_set  = null;ui.active_set = null;ui.sets       = 0;ui.stage_normal = _root.main.stages.normal;ui.stage_final  = _root.main.stages.final;ui.strikes = 0;ui.active_player = 0;ui.correct_answer = 0;ui.answers = [0,0,0,0];ui.first_player = 0;ui.rolls_per_first = 5;ui.rolls_per_rest  = 1;//// font setup//ui.fonts = new Array();ui.chars = new Array();with(ui) {  fonts[0] = new TextFormat();  fonts[1] = new TextFormat();  fonts[2] = new TextFormat();  fonts[3] = new TextFormat();  fonts[4] = new TextFormat();  fonts[5] = new TextFormat();  fonts[6] = new TextFormat();  fonts[7] = new TextFormat();  fonts[8] = new TextFormat();  chars[0] = 5*2;  chars[1] = 12*6;  chars[2] = 10*5;  chars[3] = 8*4;  chars[4] = 7*4;  chars[5] = 6*3;  chars[6] = 6*3;  chars[7] = 5*3;  chars[8] = 5*2;  fonts[0].size = 4;  fonts[1].size = 5;  fonts[2].size = 6;  fonts[3].size = 7;  fonts[4].size = 8;  fonts[5].size = 9;  fonts[6].size = 10;  fonts[7].size = 11;  fonts[8].size = 12;}//// windows sub menu//ui.menu_windows = ui.menubar.addMenu("View");with(ui.menu_windows) {  addMenuItem({label:"Connection", instanceName:"connection"});  addMenuItem({label:"Sets", instanceName:"sets"});  addMenuItem({label:"Question", instanceName:"question"});  addMenuItem({label:"Final", instanceName:"final"});  addMenuItem({label:"Teams", instanceName:"teams"});  // addMenuItem({label:"Log", instanceName:"log"});}ui.menu_windows['clients'].enabled = false;ui.menu_windows['log'].enabled = false;ui.menu_windows['connection'].click = function(obj) {  ui.click_view_connection(obj);}ui.menu_windows['sets'].click = function(obj) {  ui.click_view_sets(obj);}ui.menu_windows['question'].click = function(obj) {  ui.click_view_q(obj);}ui.menu_windows['final'].click = function(obj) {  ui.click_view_f(obj);}ui.menu_windows['teams'].click = function(obj) {  ui.click_view_t(obj);}//// connect sub menu//ui.menu_connect = ui.menubar.addMenu("Connection");with(ui.menu_connect) {  addMenuItem({label:"View", instanceName:"view"});  addMenuItem({label:"Connect", instanceName:"connect"});}ui.menu_connect['view'].click = function(obj) {  ui.click_view_connection(obj);};ui.menu_connect['connect'].click = function(obj) {  ui.click_connect(ui.windows['connect'].content.button_connect);};//// sets sub menu//ui.menu_sets = ui.menubar.addMenu("Sets");with(ui.menu_sets) {  addMenuItem({label:"View", instanceName:"view"});  addMenuItem({label:"Reload Client Data", instanceName:"reload_client"});  addMenuItem({label:"Reload Server Data", instanceName:"reload_server"});}ui.menu_sets['view'].click = function(obj) {  ui.click_view_sets();};ui.menu_sets['reload_client'].click = function(obj) {  ui.click_reload_client();}ui.menu_sets['reload_server'].click = function(obj) {  ui.click_reload_server();}//// question sub menu//ui.menu_q = ui.menubar.addMenu("Question");with(ui.menu_q) {  addMenuItem({label:"View", instanceName:"view"});  /*  addMenuItem({label:"Player 1 +", instanceName:"player1_good"});  addMenuItem({label:"Player 1 -", instanceName:"player1_bad"});  addMenuItem({label:"Player 2 +", instanceName:"player2_good"});  addMenuItem({label:"Player 2 -", instanceName:"player2_bad"});  addMenuItem({label:"Player 3 +", instanceName:"player3_good"});  addMenuItem({label:"Player 3 -", instanceName:"player3_bad"});*/}ui.menu_q['view'].click = function(obj) {  ui.click_view_q();};ui.menu_q['player1_good'].click = function(obj) {  ui.score(1, 1);}ui.menu_q['player1_bad'].click = function(obj) {  ui.score(1, 0);}ui.menu_q['player2_good'].click = function(obj) {  ui.score(2, 1);}ui.menu_q['player2_bad'].click = function(obj) {  ui.score(2, 0);}ui.menu_q['player3_good'].click = function(obj) {  ui.score(3, 1);}ui.menu_q['player3_bad'].click = function(obj) {  ui.score(3, 0);}//// stages sub menu//ui.menu_stages = ui.menubar.addMenu("Stages");with(ui.menu_stages) {  addMenuItem({label:"Normal", instanceName:"normal"});  addMenuItem({label:"Final", instanceName:"final"});}ui.menu_stages['normal'].click = function(obj) {  main.stages.set_stage("normal");};ui.menu_stages['final'].click = function(obj) {  main.stages.set_stage("final");};//// sounds sub menu//ui.menu_sound = ui.menubar.addMenu("Sounds");with(ui.menu_sound) {  addMenuItem({label:"Play Correct", instanceName:"play_correct"});  addMenuItem({label:"Play Wrong", instanceName:"play_wrong"});  addMenuItem({label:"Play Theme", instanceName:"play_theme"});  addMenuItem({label:"Play Final", instanceName:"play_final"});}ui.menu_sound['play_correct'].click = function(obj) {  trace("play correct sound");  _root.main.mod_correct(true);};ui.menu_sound['play_wrong'].click = function(obj) {  trace("play wrong  sound");  _root.main.mod_wrong(true);};ui.menu_sound['play_theme'].click = function(obj) {  trace("toggle theme sound");  if (obj.attributes.label == "Play Theme") {    obj.attributes.label = "Stop Theme";    _root.main.mod_theme(true);  } else {    obj.attributes.label = "Play Theme";    _root.main.mod_theme(false);  }};ui.menu_sound['play_final'].click = function(obj) {  trace("toggle final sound");  if (obj.attributes.label == "Play Final") {    obj.attributes.label = "Stop Final";    _root.main.mod_final(true);  } else {    obj.attributes.label = "Play Final";    _root.main.mod_final(false);  }};//// menu event handling//ui.listen_menu = new Object();ui.listen_menu.change = function(evt) {  var menu = evt.menu;  var item = evt.menuItem  //	trace("item: " + item);  //	for (key in item) {  //		trace("  " + key + " = " + item[key]);  //	}  if (item.click) {    item.click(item);  } else {    trace("no click handler defined for " + item);  }}ui.menu_windows.addEventListener("change",listen_menu);ui.menu_connect.addEventListener("change",listen_menu);ui.menu_sets.addEventListener("change",listen_menu);ui.menu_q.addEventListener("change",listen_menu);ui.menu_stages.addEventListener("change",listen_menu);ui.menu_sound.addEventListener("change",listen_menu);//// window event handling//ui.listen_window = new Object();ui.listen_window.click = function(obj) {  target = obj.target;  //	trace("clicked window: " + target);  //	for (key in target) {  //		trace("  " + key + " = " + target[key]);  //	}  if (target.click) {    target.click(target);  } else {    trace("no click handler defined for " + target);  }}//// Connection Window//ui.windows['connect'].addEventListener("click", listen_window);ui.windows['connect']['click'] = function(obj) {  obj._visible = false;}ui.click_connect = function(obj) {  if (obj.label == "Connect") {    _root.net.connect();  } else if (obj.label == "Cancel") {    _root.net.cancel();  } else if (obj.label == "Disconnect") {    _root.net.disconnect();  }}ui.connected = function() {  ui.connect_buttons(false);  ui.windows['connect'].content.button_connect.label = "Disconnect";  ui.menu_connect.connect.attributes.label = "Disconnect";}ui.disconnected = function() {  ui.connect_buttons(true);  ui.windows['connect'].content.button_connect.label = "Connect";  ui.menu_connect.connect.attributes.label = "Connect";}ui.connecting = function() {  ui.connect_buttons(false);  ui.windows['connect'].content.button_connect.label = "Cancel";  ui.menu_connect.connect.attributes.label = "Cancel";}ui.connect_buttons = function(opt) {  with(ui.windows['connect'].content) {    label_host.enabled = opt;    label_port.enabled = opt;    data_host.enabled = opt;    data_port.enabled = opt;    data_type_view.enabled    = opt;    data_type_control.enabled = opt;  }};ui.click_view_connection = function(obj) {  with(ui.windows['connect']) {    _visible = true;    _x = (_root.width - _width) / 2;    _y = (_root.height - _height) / 2;  }}//// Question Sets Window//ui.windows['sets'].addEventListener("click", listen_window);ui.windows['sets']['click'] = function(obj) {  obj._visible = false;};ui.click_clear_dones = function() {  var s = _root.main.stages.normal;  for (var c = 1; c <= 4; c++) {    with (s["cat_" + c]) {      controls.visible.selected = false;      cat._visible = controls.visible.selected;      _root.net.send_mod(s["cat_" + c], [controls.visible.selected]);    }    for (var q = 1; q <= 4; q++) {      ui.click_done(s["box_" + c + "_" + q], false);    }  }};ui.sets_tree_changed = function(item) {//  trace("selected label [" + item.attributes.label + "]");		     //  trace("selected type  [" + item.attributes.type + "]");		   var w = ui.windows["sets"].content;  //  trace(item);  type = item.attributes.type;  //  trace(type);  if (type == "questions") {      w.box_question.text = "";      w.box_answer.text   = "";      w.box_id.text       = "";      ui.selected_set = null;  } else if (type == "question") {      var correct = Number(item.attributes.correct);      var temp_answers = [item.attributes.ans1, item.attributes.ans2, item.attributes.ans3];      w.box_question.text = item.attributes.question;      w.box_answer.text   = "";      for (var i = 0; i < temp_answers.length; i++) {	  w.box_answer.text += temp_answers[i];	  if (correct == i+1) {	      w.box_answer.text += " (correct)"	  }	  w.box_answer.text += "\n";      }      w.box_id.text = item.attributes.id;      ui.selected_set = item;  } else {      w.box_question.text = "";      w.box_answer.text   = "";      w.box_id.text       = "";      ui.selected_set = null;  }  trace("selected " + ui.selected_set);};ui.click_view_sets = function(obj) {  with(ui.windows['sets']) {    _visible = true;    _x = (_root.width - _width) / 2;    _y = (_root.height - _height) / 2;  }};ui.click_reload_client = function(obj) {  _root.net.send("!get_sets");};ui.click_reload_server = function(obj) {  _root.net.send("!reload");};ui.click_set_active = function(obj) {  var w = ui.windows["sets"].content;  var s = ui.selected_set.attributes.id;  //trace("set active to set [" + s + "]");  // if (not s) {  //    return;  //}  net.send_smod("_root.ui.handle_mod_set_active", [s]);};ui.num_to_root = function(num: Number) {  var d = ui.windows['sets'].content.tree.dataProvider.firstChild;  var c = d.childNodes;  ui.sets = c.length;  for (var i = 0; i < ui.sets; i++) {    var node = c[i];    if (Number(node.attributes.id) == num) {      return node;    }  }  trace("!!! didn't find it question set num " + num);};ui.handle_mod_set_active = {mod:function(s) {    //trace("handling mod set active (s="+s+")");  var q = ui.windows['q'].content;  // _root.game.set_active(s);  // ui.active_set = Number(s[0]);    ui.active_set = ui.num_to_root(s[0]);  //trace("ui.active_set = " + ui.active_set);  //ui.update_questions(ui.num_to_root(ui.active_set));  ui.update_questions();}};//// question window//ui.windows['q'].addEventListener("click", listen_window);ui.windows['q']['click'] = function(obj) {  obj._visible = false;}ui.click_view_q = function(obj) {  with(ui.windows['q']) {    _visible = true;    _x = (_root.width - _width) / 2;    _y = (_root.height - _height) / 2;  }};ui.set_view_q = function(node) {  var worth_data = node.attributes.label;  var a_data     = node.firstChild.firstChild.attributes.label;  var q_data     = node.lastChild.firstChild.attributes.label;  var w = _root.ui.windows['q'].content;  w.box_category.text = node.parentNode.attributes.label;  w.box_question.text = q_data;  w.box_answer.text   = a_data;  w.box_worth.text    = worth_data;  w.box_done.selected = _root.main.stages.normal.view.controls.done.selected;};ui.num_showing = 0;ui.show_order  = [null,null,null];ui.set_show = function(a) {    //    trace("num_showing = " + ui.num_showing);    //    trace("show_order = " + ui.show_order.join(","));    var q = ui.windows['q'].content;    var box = q['check_a' + (a+1)];    if (box.selected) {	//	trace("showing " + a);	if (ui.num_showing > 2) {	    box.selected = false;	    return;	} else {	    ui.show_order[ui.num_showing] = a;	    ui.num_showing++;	}    } else {	//	trace("hiding " + a);	if (ui.num_showing > 0) {	    for (var i = 0; i <= 2; i++) {		if (a == ui.show_order[i]) {		    ui.show_order[i] = null;		    for (var j = i+1; j <= 2; j++) {			ui.show_order[j-1] = ui.show_order[j];		    }		    ui.show_order[2] = null;		    ui.num_showing--;		}	    }	} else {	}    }    ui.send_shows();}ui.send_shows = function() {    var q = ui.windows['q'].content;    var showing = [0];    for(var i = 0; i <= 3; i++) {	var j = ui.show_order[i];	if (j == ui.correct_answer) {	    showing[0] = i+1;	}	if (null == j) {	    continue;	}	var ttext = q['box_ta' + j].text;	var text = "";	if (j > 0) {	    text  = q['box_a'  + j].text;	}	if (ttext) {	    showing.push(ttext);	} else {	    showing.push(text);	}    }    _root.net.send_smod("_root.ui.handle_mod_view_text", showing);};ui.handle_mod_view_text = {mod: function(s) {        trace("showing [" + s.join(",") + "]");    var st = ui.stage_normal;    var vis = [false, false, false];    if (s.length > 1) {	for (var i = 1; i < s.length; i++) {	    st.fill_box(i-1, {num:    i,					  answer: s[i],					  worth:  i});	    vis[i-1] = true;	    if ((ui.current_stage == 4) &&		(Number(s[0]) != i)) {		vis[i-1] = false;	    }	}    }        trace("vis = " + vis.join(","));  st.set_vis(vis);}};ui.click_save_rolls = function() {    var q = ui.windows['q'].content;    _root.net.send_smod("_root.ui.handle_mod_set_rolls", [Number(q.box_rolls_first.text),							  Number(q.box_rolls_rest.text)]);};ui.handle_mod_set_rolls = {mod: function(s) {    var q = ui.windows['q'].content;    q.box_rolls_first.text = s[0];    q_box_rolls_rest.text  = s[1];}};ui.set_answer = function(t,a) {    //var temp = ui.answers[t];    ui.answers[t] = a;    _root.net.send_smod("_root.ui.handle_mod_set_answer", ui.answers);    //ui.answers[t] = temp;}ui.handle_mod_set_answer = {mod: function(s) {    var q = ui.windows['q'].content;    for (var i = 1; i <= 3; i++) {	if (s[i] == "-") {	    ui.answers[i] = null;	    for (var j = 1; j <= 4; j++) {		q['t' + i + '_a' + j].selected = false;	    }	} else {	    ui.answers[i] = Number(s[i]);	    q['t' + i + '_a' + (ui.answers[i]+1)].selected = true;	}    }    }};ui.set_first = function(num) {    _root.net.send_smod("_root.ui.handle_mod_set_first", [num]);}ui.handle_mod_set_first = {mod: function(s) {    var num = s[0];    var w = _root.ui.windows['q'].content;    ui.first_player = num;    if (0 == num) {	w.first_t1.selected = false;	w.first_t2.selected = false;	w.first_t3.selected = false;    } else {	w['first_t'+num].selected = true;    }    if ((0 != num) && (0 == ui.current_stage)) {	ui.click_stage(num);    }}};ui.go_stage     = new Array();ui.active_stage = new Array();ui.current_stage = 0;ui.answer_enables = function(t) {    var w = _root.ui.windows['q'].content;    for (var i = 1; i <= 3; i++) {	var en = false;	if (t == i) {	    en = true;	}	w['t' + i + "_a1"].enabled = en;	w['t' + i + "_a2"].enabled = en;	w['t' + i + "_a3"].enabled = en;	w['t' + i + "_a4"].enabled = en;    }    /*    var en = false;    if (t == 4) {	en = true;    }    for (var i = 1; i <= 4; i++) {	w['check_a' + i].enabled = en;    }    */}ui.click_stage = function(stage) {  trace("click stage " + ui.current_stage);  ui.go_stage[stage]();  //  ui.set_stage(stage);};ui.set_stage = function(stage) {  _root.net.send_smod("_root.ui.handle_mod_set_stage", [stage]);  //  ui.active_stage(stage);};ui.handle_mod_set_stage = {mod: function(data) {  trace("setting stage " + data[0]);  ui.active_stage[Number(data[0])]();  ui.answer_enables(Number(data[0]));}};ui.go_stage[0] = function() {    if (ui.current_stage != 0) {	ui.set_stage(0);    }};ui.go_stage[1] = function() {  if (ui.current_stage != 5) {    ui.set_stage(1);  }};ui.go_stage[2] = function() {  if (ui.current_stage != 5) {    ui.set_stage(2);  }};ui.go_stage[3] = function() {  if (ui.current_stage != 5) {    ui.set_stage(3);  }};ui.go_stage[4] = function() {  if ((ui.current_stage > 0) &&      (ui.current_stage < 4)) {    ui.set_stage(4);  }};ui.go_stage[5] = function() {    if (ui.current_stage == 4) {	var q = ui.windows['q'].content;	var w = ui.windows['t'].content;	for (var i = 1; i <= 3; i++) {	    //trace("correct = " + ui.correct_answer + ", player's answer = " + ui.answers[i]);	    if (ui.answers[i] == ui.correct_answer) {		var rolls_earned = Number(w.p_rolls_earned[i].text);		if (ui.first_player == i) {		    rolls_earned += Number(q.box_rolls_first.text);		} else {		    rolls_earned += Number(q.box_rolls_rest.text);		}		w.p_rolls_earned[i].text = rolls_earned;	    } else {	    }	}		net.send_smod(w, [w.p_name[1].text, w.p_score[1].text, w.p_rolls_earned[1].text, w.p_rolls_passed[1].text, w.p_whammies[1].text,			  w.p_name[2].text, w.p_score[2].text, w.p_rolls_earned[2].text, w.p_rolls_passed[2].text, w.p_whammies[2].text,			  w.p_name[3].text, w.p_score[3].text, w.p_rolls_earned[3].text, w.p_rolls_passed[3].text, w.p_whammies[3].text]);	ui.set_stage(5);		//var score = Number(t.p_score[ui.current_stage].text);	//var new_score = score+	//var new_rolls_earned = rolls_earned + Number(q.box_rolls_first.text);	//t.p_score[ui.current_stage].text = new_score;	//trace("adding scores " + score + " + " + pot + " = " + new_score);	//ui.set_stage(4);	//_root.net.send_smod(t, [t.p_name[1].text, t.p_score[1].text,	//			t.p_name[2].text, t.p_score[2].text]);	//	_root.net.send_smod("_root.ui.handle_mod_questions", [true,true,true,true,true,true]);	_root.net.send_smod("_root.ui.handle_set_pot", [0]);      }  };ui.active_stage[0] = function() {  ui.set_active_player(0);  ui.set_first(0);  ui.windows['q'].content.select_stage_toss.selected = true;  ui.current_stage = 0;};ui.active_stage[1] = function() {  ui.set_active_player(1);  ui.windows['q'].content.select_stage_1.selected = true;  ui.current_stage = 1;};ui.active_stage[2] = function() {  ui.set_active_player(2);  ui.windows['q'].content.select_stage_2.selected = true;  ui.current_stage = 2;};ui.active_stage[3] = function() {  ui.set_active_player(3);  ui.windows['q'].content.select_stage_3.selected = true;  ui.current_stage = 3;};ui.active_stage[4] = function() {  ui.set_active_player(0);  ui.windows['q'].content.select_stage_complete.selected = true;  ui.current_stage = 4;  ui.send_shows();};ui.active_stage[5] = function() {  ui.set_active_player(0);  ui.windows['q'].content.select_stage_scored.selected = true;  ui.current_stage = 5;};ui.qw_node_2_answer = function(node) {  var question = node.parentNode.attributes.label;  var worth = node.attributes.label;  var answer = node.firstChild.attributes.label;  return {question: question, worth: worth, answer: answer};};ui.update_questions = function() {  var w = ui.windows["q"].content;  var s = ui.stage_normal;  var a = ui.active_set;  if (null == a) {      w.box_question.text = "no question selected";      return;  }  var id = Number(a.attributes.id);  trace("set active set to " + id);  // w.qs.removeAll();  w.box_question.text = a.attributes.question;  w.box_a1.text       = a.attributes.ans1;  w.box_a2.text       = a.attributes.ans2;  w.box_a3.text       = a.attributes.ans3;  ui.correct_answer = Number(a.attributes.correct);  w['correct_a' + ui.correct_answer].selected = true;  w.box_set.text = id + "/" + ui.sets;  if(id == 1) {    w.button_prev_set.enabled = false;  } else {    w.button_prev_set.enabled = true;  }  if(id == ui.sets) {    w.button_next_set.enabled = false;    w.button_next.enabled = false;  } else {    w.button_next_set.enabled = true;    w.button_next.enabled = true;  }  //s.make_boxes(a_root.childNodes.length);};ui.click_next_set = function(obj) {  var s = Number(ui.active_set.attributes.id);  if (s + 1 == ui.sets) {    trace("already at last set");    return;  }  s++;  net.send_smod("_root.ui.handle_mod_set_active", [s]);};ui.click_prev_set = function(obj) {  var s = Number(ui.active_set.attributes.id);  if (s + 1 == 1) {    trace("already at first set");    return;  }  s--;  net.send_smod("_root.ui.handle_mod_set_active", [s]);};ui.click_go_next_set = function(obj) {  var s = Number(ui.active_set.attributes.id);  if (s + 1 == Number(ui.sets)) {    trace("already at last set");    return;  }  s++;  ui.click_clear_set();  ui.click_stage(0);  net.send_smod("_root.ui.handle_mod_set_active", [s]);};ui.click_clear_set = function(obj) {    var w = _root.ui.windows['q'].content;    //  _root.net.send_smod("_root.ui.handle_mod_questions", [false, false, false, false, false, false]);    for (var i = 0; i < 4; i++) {	w['box_ta' + i].text = "";	w['check_a' + (i+1)].selected = false;	//	for (var j = 1; j <= 3; i++) {	//}    }    ui.show_order = [null, null, null];    ui.num_showing = 0;    _root.net.send_smod("_root.ui.handle_mod_view_text", [null]);    _root.net.send_smod("_root.ui.handle_mod_set_answer", [null,null,null,null]);    _root.net.send_smod("_root.ui.handle_mod_set_first", [0]);}ui.click_score = function(obj) {  var w = _root.ui.windows['q'].content;  var good = 0;  var worth = w.box_worth.text;  if (not worth) {    return;  }  if (w.box_good.selected) {    good = 1;  }  trace("scoring player [" + w.active + "] worth [" + worth + "] good [" + good + "]");  if (w.active == 0) {    return;  }  var w2 = _root.ui.windows['p'].content;  with(w2.p_score[w.active]) {    if (good) {      text = Number(text) + Number(worth);    } else {      text = Number(text) - Number(worth);    }  }  if ((good) &&      (_root.main.stages.normal.state == _root.main.stages.normal.STATE_QVIEW)) {    ui.click_done(_root.main.stages.normal.view, true);    ui.click_next();  }  ui.modify_player(w.active,		   w2.p_name[w.active].text,		   w2.p_score[w.active].text,		   w2.p_rolls_earned[w.active].text,		   w2.p_rolls_passed[w.active].text,		   w2.p_whammies[w.active].text);  ui.click_save_players();}ui.click_done = function(obj, done, no_send) {  var vis = not done;  if (obj == _root.main.stages.normal.view) {    _root.ui.windows['q'].content.box_done.selected = done;    if (_root.main.stages.normal.state > _root.main.stages.normal.STATE_WVIEW) {      vis = false;    }  }  //  trace("view: " + obj);  //  trace("before: " + obj.controls.done.selected);  obj.controls.done.selected = done;  //  trace("after: " + _root.main.stages.normal.view.controls.done.selected);  obj.worth._visible = vis;  if (not no_send) {    _root.net.send_mod(obj, [done]);  }};ui.click_strike = function(obj) {  if ((ui.active_player != 1) &&      (ui.active_player != 2)) {	return;      }    if (ui.strikes == 3) {    _root.net.send_smod("ui.handle_set_strikes", [0]);    if (ui.active_player == 1) {      ui.set_stage(2);    } else {      ui.set_stage(1);    }  } else {      _root.main.mod_wrong(true);      _root.net.send_smod("ui.handle_set_strikes", [ui.strikes + 1]);  }};ui.handle_set_strikes = {mod: function(data: Array) {  var q = ui.windows['q'].content;  ui.strikes = Number(data[0]);  q.select_xs[ui.strikes].selected = true;  _root.main.stages.players.set_strikes(ui.strikes);}};ui.set_x = function(strikes: Number) {  _root.net.send_smod("ui.handle_set_strikes", [strikes]);}//// teams window//ui.windows['t'].addEventListener("click", listen_window);ui.windows['t']['click'] = function(obj) {  obj._visible = false;}ui.click_view_t = function(obj) {  with(ui.windows['t']) {    _visible = true;    _x = (_root.width - _width) / 2;    _y = (_root.height - _height) / 2;  }};ui.modify_player = function(num, new_name, new_score, new_rolls_earned, new_rolls_passed, new_whammies) {    //trace("modifying player [" + num + "] with [" + new_name + "," + new_score + "]");  with(_root.main.stages.players.p[num]) {    set_data(new_score, new_name, new_rolls_earned, new_rolls_passed, new_whammies);  }};ui.click_save_players = function() {  var w = ui.windows['t'].content;  net.send_mod(w, [w.p_name[1].text, w.p_score[1].text, w.p_rolls_earned[1].text, w.p_rolls_passed[1].text, w.p_whammies[1].text,		   w.p_name[2].text, w.p_score[2].text, w.p_rolls_earned[2].text, w.p_rolls_passed[2].text, w.p_whammies[2].text,		   w.p_name[3].text, w.p_score[3].text, w.p_rolls_earned[3].text, w.p_rolls_passed[3].text, w.p_whammies[3].text]);};ui.set_active_player = function(num) {  _root.main.stages.players.set_active(num);  ui.active_player = num;}ui.click_clear_players = function() {  var w = ui.windows['t'].content;  for (var i = 1; i <= 3; i++) {    w.p_name[i].text = "";//    w.p_team[i].text = "";    w.p_score[i].text = "0";    w.p_rolls_earned[i].text = "0";    w.p_rolls_passed[i].text = "0";    w.p_whammies[i].text     = "0";    ui.modify_player(i, "", 0, 0, 0, 0);  }};//// final window//ui.windows['f'].addEventListener("click", listen_window);ui.windows['f']['click'] = function(obj) {  obj._visible = false;}ui.clock_roll = function() {    var w = _root.ui.windows['f'].content;    // w.roll_use_earned.selected    // w.roll_use_passed.selected    // todo}ui.click_view_f = function(obj) {  with(ui.windows['f']) {    _visible = true;    _x = (_root.width - _width) / 2;    _y = (_root.height - _height) / 2;  }};ui.click_score_final = function() {  var w1 = _root.ui.windows['f'].content;  var w2 = _root.ui.windows['p'].content;  trace("w1 = [" + w1 + "]");  trace("w2 = [" + w2 + "]");  Number(w1.won_score.text);  Number(w1.won_rolls.text);  Number(w1.won_whammies.text);  for (var i = 1; i <= 3; i++) {    var inc = Number(w1.p_w[i].text);    if (not inc) {      inc = 0;    }    trace("inc = [" + inc + "]");    if (not w1.p_c[i].selected) {      inc = inc * -1;    }    trace("old score = [" + w2.p_score[i].text + "]");    w2.p_score[i].text = Number(w2.p_score[i].text) + inc;    trace("new score = [" + w2.p_score[i].text + "]");    ui.modify_player(i, w2.p_name[i].text, w2.p_score[i].text, w2.p_rolls_earned[i].text, w2.p_rolls_passed[i].text, w2.p_whammies[i].text);    // *** updated player    // *** mod player  }  ui.click_save_players(); // *** mod players window};ui.click_clear_final = function() {  var w = _root.ui.windows['f'].content;  for (var i = 1; i <= 3; i++) {    w.p_q[i].text = "";    w.p_w[i].text = "";    w.p_c[i].selected = false;    _root.main.stages.final.set_question(i, "");    _root.main.stages.final.set_wager(i, "");  }    // *** send mod};ui.click_change_final = function(num, no_send) {  var w = _root.ui.windows['f'].content;  var s = _root.main.stages.final;  w.show_wager.selected = false;  if (num == -1) {    w.s_title.selected = true;  } else if (num == 0) {    w.s_answer.selected = true;  } else if (num == 4) {    w.s_question.selected = true;  } else {    w.p_s[num].selected = true;    _root.main.stages.players.set_active(num);  }  s.set_state(num + 1, no_send);};ui.click_show_wager = function(show, no_send) {  trace("in click show wager with [" + show + "]");  _root.main.stages.final.show_wager(show)  _root.ui.windows['f'].show_wager.selected = show;  if (not no_send) {    ui.click_save_final();  }};ui.click_save_final = function() {  var w = _root.ui.windows['f'].content;  _root.net.send_mod(w, [w.p_q[1].text, w.p_w[1].text, w.p_c[1].selected,			 w.p_q[2].text, w.p_w[2].text, w.p_c[2].selected,			 w.p_q[3].text, w.p_w[3].text, w.p_c[3].selected,			 w.show_wager.selected]);};ui.set_final_question = function(num, question) {  _root.main.stages.final.set_question(num, question);};ui.set_final_wager = function(num, wager) {  _root.main.stages.final.set_wager(num, wager);};//// stage and setup//ui.hide_int = 0;ui.mouse_moved = 0;mouse_listen = new Object();mouse_listen.onMouseMove = function () {  ui.mouse_moved = 1;  if (_root._ymouse < 40) {    ui.show_some();  }};ui.check_hide = function() {  trace("checking hide [" + ui.mouse_moved + "]");  ui.mouse_moved--;  if (ui.mouse_moved < 0) {    ui.hide_all();  }};ui.show_some = function() {  _root.ui.menubar._visible = true;  Mouse.show();}ui.hide_all = function() {  fscommand("fullscreen", true);  _root.ui.windows['connect']._visible = false;  _root.ui.windows['sets']._visible = false;  _root.ui.windows['q']._visible = false;  _root.ui.windows['p']._visible = false;  _root.ui.menubar._visible = false;  Mouse.hide();};ui.client_setup = function() {  if (net.type == "view") {    Mouse.addListener(mouse_listen);    with(_root.main.stages) {      _x = 0;      _y = 0;      _xscale = 100;      _yscale = 100;    }    ui.hide_all();    if (not ui.hide_int) {      ui.hide_int = setInterval(ui.check_hide, 3000);    }  } else {    Mouse.removeListener(mouse_listen);    with(_root.main.stages) {      _x = 320;      _y = 240;      _xscale = 50;      _yscale = 50;    }    //    _root.ui.windows['connect']._visible = false;    //    _root.ui.windows['sets']._visible = false;    //    _root.ui.windows['q']._visible = false;    _root.ui.menubar._visible = true;    clearInterval(ui.hide_int);    ui.hide_int = 0;  }};//// normal stage substages////// function mod//ui.handle_mod_questions = {mod:function(data) {  trace("ui.handle_mod_questions called with [" + data.join(",") + "]");  ui.stage_normal.set_vis(data);  ui.windows['q'].content.set_viss(data);}};ui.handle_set_pot = {mod:function(data) {  trace("ui.handle_set_pot called with [" + data.join(",") + "]");  ui.windows['q'].content.set_pot(Number(data[0]));  _root.main.stages.players.set_pot(Number(data[0]));}};