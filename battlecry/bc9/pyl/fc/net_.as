net.colors = new Object();net.colors['red']   = "#aa0000";net.colors['green'] = "#00aa00";net.colors['blue']  = "#0000aa";net.OPT_CONNECT = 1;net.OPT_DISCONNECT = 2;net.OPT_CANCEL = 3;net.connecting = 0;net.connected = 0;net.reconnect = 1;net.retry_time = 3000;net.retry_int = 0;net.retry_cnt = 0;net.host = "localhost";net.port = 7000;net.type = "view";net.socket = new XMLSocket();net.socket.onClose = function() {  net.connected = 0;  net.retry_cnt = 0;  net.log_connect("connection lost", "red", 1);  if (net.reconnect) {    net.connecting = 1;    _root.ui.connecting();    net.connect();    return;  }  _root.ui.disconnected();  net.retry_cnt = 0;}net.socket.onConnect = function(res) {  if (res) {    clearInterval(net.retry_int);    net.retry_int = 0;    net.connected = 1;    net.connecting = 0;    net.log_connect("connected", "green", 1);    net.init();    _root.ui.connected();    return  }  if (! net.reconnect) {    net.connecting = 0;    net.log_connect("connection failed", "red", 1);    clearInterval(net.retry_int);    net.retry_int = 0;    net.retry_cnt = 0;    _root.ui.disconnected();    return;  }    if (! net.retry_int) {    net.retry_int = setInterval(net.connect, net.retry_time);  }}net.socket.onData = function(src) {  cmd.process(src);}net.connect = function() {  if (net.connected) {    return;  }  net.retry_cnt++;  net.log_connect("connecting to " + net.host + ":" + net.port + " [try " + net.retry_cnt + "]");  net.connecting = 1;  _root.ui.connecting();  var res = net.socket.connect(net.host, net.port);  if ((! net.connecting) &&      (! net.connected)) {    return;  }  if (res) {  } else {    net.log_connect("bad host and/or port", "red", 1);    net.retry_cnt = 0;    net.connecting = 0;    _root.ui.disconnected();  }}net.disconnect = function() {  net.log_connect("connection aborted");  net.socket.close();  net.connected = 0;  net.retry_cnt = 0;  _root.ui.disconnected();}net.cancel = function() {  if (! net.connecting) {    return;  }  net.log_connect("connection canceled");  clearInterval(net.retry_int);  net.retry_int = 0;  net.retry_cnt = 0;  net.connecting = 0;  _root.ui.disconnected();}net.log_connect = function(msg, color, bold) {  if (color) {    msg = "<font color=\"" + net.colors[color] + "\">" + msg + "</font>";  }  if (bold) {    msg = "<b>" + msg + "</b>";  }  var was_end = 0;  with(_root.ui.windows["connect"].content.data_text) {    if (vPosition == maxVPosition) {      was_end = 1;    }    text += "[<b>net</b>] " + msg + "\n";    if (was_end) {      vPosition = maxVPosition;    }  }}net.init = function() {  // net.socket.send("!type " + net.type + "\n!hello\n");  net.send("!type " + net.type);  net.send("!hello");  net.send("!get_sets");  net.send("!get_mods");  ui.client_setup();}net.squeue = new Array();net.sint = 0;net.send = function(data) {  if (not net.connected) {    return;  }  trace("enqueuing [" + data + "]");  net.squeue.push(data);  //  net.log_connect("pushing " + data.length + " byte(s) onto queue");  if (net.sint) {    return;  }  net.sint = setInterval(net.send_queue, 100);  //  net.send_queue();}net.send_queue = function() {  if (net.squeue.length == 0) {    clearInterval(net.sint);    net.sint = 0;    return;  }  var num = net.squeue.length;  var msg = net.squeue.join("\n") + "\n";  net.squeue = [];  net.socket.send(msg);  //  net.log_connect("sent " + num + " message(s)");  if (! net.sint) {    net.sint = setInterval(net.send_queue, 1000);  }};net.send_mod = function(key, data) {  net.send_gmod("mod", key, data);};net.send_smod = function(key, data) {  net.send_gmod("smod", key, data);};net.send_gmod = function(func, key, data) {  for (var i = 0; i < data.length; i++) {    if (typeof data[i] == "string") {	if (data[i].indexOf(" ", 0) != -1) {	    //trace("data[" + i + "] = [" + data[i] + "]");	    data[i] = "\"" + data[i] + "\"";	}    } else if (typeof data[i] == "number") {	    } else if (typeof data[i] == "null") {    } else if (typeof data[i] == "boolean") {    } else {	trace("!!! unknown data type !!!");    }    if ((data[i] == undefined) ||	(data[i] == "") ||	(data[i].length == 0)) {      //      trace("data is blank");      data[i] = "-";    } else {      //      trace("data is not blank");    }  }  var data_text = data.join(" ");  net.send("!" + func + " " + key + " " + data_text);}